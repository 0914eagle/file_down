
def drop_piece(C, P, heights):
    piece_configurations = {
        1: [[(0, 0), (0, 1), (0, 2), (0, 3)], [(0, 0), (1, 0), (2, 0), (3, 0)]],
        2: [[(0, 0), (0, 1), (1, 1)], [(0, 0), (0, 1), (-1, 1)], [(0, 0), (1, 0), (1, -1)], [(0, 0), (1, 0), (1, 1)]],
        3: [[(0, 0), (0, 1), (-1, 1)], [(0, 0), (1, 0), (1, 1)], [(0, 0), (0, 1), (1, 0)], [(0, 0), (1, 0), (0, -1)]],
        4: [[(0, 0), (0, 1), (0, 2), (1, 1)], [(0, 0), (1, 0), (2, 0), (1, 1)], [(0, 0), (1, 0), (1, -1), (1, 1)], [(0, 0), (1, 0), (0, -1), (2, 0)]],
        5: [[(0, 0), (0, 1), (0, 2), (1, 0)], [(0, 0), (1, 0), (2, 0), (1, 1)], [(0, 0), (1, 0), (1, -1), (1, 1)], [(0, 0), (1, 0), (0, 1), (2, 0)], [(0, 0), (0, 1), (-1, 1), (1, 1)]],
        6: [[(0, 0), (0, 1), (0, 2), (-1, 1)], [(0, 0), (1, 0), (2, 0), (1, -1)], [(0, 0), (1, 0), (1, 1), (1, -1)], [(0, 0), (1, 0), (0, -1), (2, 0)]],
        7: [[(0, 0), (0, 1), (0, 2), (1, 2)], [(0, 0), (1, 0), (2, 0), (0, 1)], [(0, 0), (0, 1), (0, 2), (-1, 2)], [(0, 0), (1, 0), (2, 0), (1, -1)]]
    }

    ways = 0
    for config in piece_configurations[P]:
        valid = True
        for x, y in config:
            if 0 <= x < C and heights[x] >= -y:
                heights[x] += y
            else:
                valid = False
                break
        if valid:
            ways += 1
        for x, y in config:
            heights[x] -= y

    return ways

# Read input
C, P = map(int, input().split())
heights = list(map(int, input().split()))

# Calculate and output the number of ways to drop the piece in the field
print(drop_piece(C, P, heights))
```
